package com.shpp.p2p.cs.rvalyaev.assignment3;

import com.shpp.cs.a.console.TextProgram;

/**
 * –ß–∞—Å—Ç–∏–Ω–∞ 3 ‚Äî –ü—ñ–¥–Ω–µ—Å–µ–Ω–Ω—è –¥–æ —Å—Ç–µ–ø–µ–Ω—è
 * –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–µ—Ç–æ–¥:
 * private double raiseToPower(double base, int exponent)
 * –¶–µ–π –º–µ—Ç–æ–¥ –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ –æ–±—á–∏—Å–ª—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞,
 * –ø—ñ–¥–Ω–µ—Å–µ–Ω–æ–≥–æ –¥–æ —Å—Ç–µ–ø–µ–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 2. —Ç–æ–±—Ç–æ raiseToPower(2.0, 3) –¥–∞—Å—Ç—å 2^3 = 8
 * –î—Ä—É–≥–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ —Ç—ñ–ª—å–∫–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º, –∞–ª–µ —ñ –≤—ñ–¥‚Äô—î–º–Ω–∏–º. –ù–∞–ø—Ä–∏–∫–ª–∞–¥ 0.5 –≤ —Å—Ç–µ–ø–µ–Ω—ñ -2 —Ü–µ 4.
 * –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –∂–∏—Ç—Ç—è –≤–≤–∞–∂–∞—Ç–∏–º–µ–º–æ, —â–æ –≤—Å–µ, —â–æ –ø—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ —Å—Ç–µ–ø–µ–Ω—è 0, —Å—Ç–∞–Ω–µ 1, —Ç–æ–±—Ç–æ 0 –≤ —Å—Ç–µ–ø–µ–Ω—ñ 0 –±—É–¥–µ 1 üòÉ
 * –û—Å–∫—ñ–ª—å–∫–∏ double –Ω–µ –≤–º—ñ—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ —Å–æ–±—ñ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ –¥–æ–≤–≥—ñ –¥—Ä–æ–±–æ–≤—ñ —á–∏—Å–ª–∞ (—è–∫ –º–∏ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏),
 * —Ç–æ –ø—Ä–∏ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó –∑ –¥–∞–±–ª–∞–º–∏ –º–æ–∂–ª–∏–≤—ñ –≤—Å—ñ–ª—è–∫—ñ –¥—Ä—ñ–±–Ω—ñ –ø–æ—Ö–∏–±–∫–∏. –¶–µ –æ–∫.
 *
 * –¢–∞–∫–æ–∂, –≤–∞–º –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≤ —Ü—å–æ–º—É –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Math.pow, Math.exp,
 * Math.log —Ç–∞ —ñ–Ω—à—ñ –∑—Ä—É—á–Ω—ñ –º–µ—Ç–æ–¥–∏ —ñ–∑ Math, —ñ–Ω–∞–∫—à–µ —è–∫–∏–π —Ç–æ–¥—ñ —Å–µ–Ω—Å, –≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ –æ–¥–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞, —á–∏ –Ω–µ —Ç–∞–∫? üòÉ
 */

public class Assignment3Part3 extends TextProgram {

    public void run() {
        final double base = readDouble("enter you number: ");
        final int exponent = readInt("enter you exponent: ");
        System.out.println(raiseToPower(base, exponent));
    }

    // Raise number base to power exponent.
    private double raiseToPower(double base, int exponent) {
        double result = base;
        int exponentNew = exponent;

        //the power(exponent) of the number must be positive
        if (exponentNew == 0) {
            return 1;
        } else if (exponentNew < 0) {
            exponentNew *= -1;
        }

        for (int i = 0; i < exponentNew - 1; i++) {
            result *= base;
        }

        if (exponent < 0) {
            result = 1 / result;
        }
        return result;
    }


}
